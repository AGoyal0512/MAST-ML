[General Setup]

    save_path = ./
    input_features = time
    target_feature = y_feature

[Data Setup]

    [[Initial]]
    data_path = ../random_data/random_test_data.csv
    weights = False #haven't tested weighting; may move

    [[Extrapolation]]
    data_path = ../random_data/random_test_data_noy.csv
    weights = False
    
    [[ExtrapolationNoD]]
    data_path = ../random_data/random_test_data_noy_noD.csv
    weights = False

    [[InitialNoD]]
    data_path = ../random_data/random_test_data_noD.csv
    weights = False
    
    [[InitialNoA]]
    data_path = ../random_data/random_test_data_noA.csv
    weights = False

    [[Set2]]
    data_path = ../random_data/random_set2_data.csv
    weights = False


[Models and Tests to Run]

    models = gkrr_model
    #test_cases = AnalysisTemplate_withy,AnalysisTemplate_noy,FullFit_test
    test_cases = ExtrapolateFullFit_test,ExtrapolateFullFit_onlymatched

#if some test files have different configuration setting than AllTests, you can make changes by adding a
#separate section
[Test Parameters]
    [[AnalysisTemplate_withy]]
    training_dataset = Initial
    testing_dataset  = Initial
    input_features=time, N_sine_feature, N_linear_feature
    target_feature=y_feature

    [[AnalysisTemplate_noy]]
    training_dataset = Initial
    testing_dataset = Extrapolation

    [[FullFit_test]]
    training_dataset=Initial
    testing_dataset=Initial
    input_features=time, N_sine_feature, N_linear_feature
    labeling_features=str_cat, num_id
    xlabel=Initial dataset measured
    ylabel=Initial dataset predicted
    stepsize=0.5
    measured_error_field_name = N_linear_feature
    group_field_name = str_cat
    mark_outlying_groups = 2

    [[ExtrapolateFullFit_test]]
    training_dataset=Initial
    testing_dataset=Initial,Set2,Extrapolation
    input_features=time, N_sine_feature, N_linear_feature
    labeling_features=str_cat, num_id
    xlabel=Initial dataset measured
    ylabel=Predicted
    stepsize=0.5
    measured_error_field_name = N_linear_feature
    group_field_name = str_cat
    mark_outlying_groups = 2
    feature_plot_xlabel = Time
    feature_plot_ylabel = Y feature
    feature_plot_field = time
    plot_filter_out = time;>;4.2
    fit_only_on_matched_groups = 0
    markers = x,+,s,d
    outlines = blue, red, green, cyan
    linestyles = -, :, --, :-
    data_labels = Initial train, Initial repredict, Set2, Extrapolation test
    
    [[ExtrapolateFullFit_onlymatched]]
    training_dataset=InitialNoA
    testing_dataset=InitialNoD,Extrapolation,ExtrapolationNoD
    input_features=time, N_sine_feature, N_linear_feature
    labeling_features=str_cat, num_id
    xlabel=Initial dataset measured
    ylabel=Predicted
    stepsize=0.5
    measured_error_field_name = N_linear_feature
    group_field_name = str_cat
    mark_outlying_groups = 2
    feature_plot_xlabel = Time
    feature_plot_ylabel = Y feature
    feature_plot_field = time
    plot_filter_out = time;>;4.2
    fit_only_on_matched_groups = 1
    markers = x,+,s,d
    outlines = blue, red, green, cyan
    linestyles = -, :, --, :-
    data_labels = Initial train no A, Initial repredict no D, Extrapolation test, Extrapolation no D


[Model Parameters]

    [[linear_model]]
    fit_intercept = True

    [[decision_tree_model]]
    max_depth = 5
    min_samples_split = 2
    min_samples_leaf = 1
    split_criterion = mse

    [[gkrr_model]]
    alpha = 0.00139
    coef0 = 1
    degree = 3
    gamma = 0.518
    kernel = rbf

    [[lkrr_model]]
    alpha = 0.00518
    gamma = 0.518
    kernel = laplacian

    [[randomforest_model]]
    split_criterion = mse
    estimators = 100
    max_depth = 5
    min_samples_split = 2
    min_samples_leaf = 1
    max_leaf_nodes = 2
    jobs = 1

    [[adaboost_model]]
    estimators = 275
    max_depth = 12
    min_samples_split = 2
    min_samples_leaf = 1
    learning rate = 1
    loss function = linear

    #minmax, size, transfer_function are the verbatim arguments for neurolab.net.newff()
    #training_algorithm is the verbatim 'support train fcn' for neurolab.train omitting 'train_'
    #see: https://pythonhosted.org/neurolab/lib.html#module-neurolab.net
    #epochs,show,goal are neurolab.net.train() arguments
    #see: https://pythonhosted.org/neurolab/lib.html#train-algorithms-based-gradients-algorithms
    #NOTE: minmax is verbose b/c [[0,1]]*9 will have bad pointers
    [[nn_model_neurolab]]
    #minmax = [[0, 1],[0, 1],[0, 1],[0, 1],[0, 1],[0, 1],[0, 1],[0, 1],[0, 1]]
    minmax = [0, 1], [0, 1], [0, 1]
    size = 11, 1
    transfer_function = TanSig
    training_algorithm = bfgs
    epochs = 5
    show = False
    goal = 0.01[default]
